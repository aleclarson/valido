// Generated by CoffeeScript 1.12.4
var toString, wrongType;

wrongType = require("./wrongType");

toString = Object.prototype.toString;

["boolean", "function", "number", "string", "symbol"].forEach(function(type) {
  return exports[type] = {
    test: function(value) {
      return typeof value === type;
    },
    error: function(key) {
      return wrongType(key, type);
    }
  };
});

exports.object = {
  test: require("isObject"),
  error: function(key) {
    return wrongType(key, "object");
  }
};

exports.array = {
  test: Array.isArray,
  error: function(key) {
    return wrongType(key, "array");
  }
};

exports["null"] = {
  test: function(value) {
    return value === null;
  },
  error: function(key) {
    return TypeError("`" + key + "` must be null");
  }
};

exports.date = {
  test: function(value) {
    if (value) {
      return value.constructor === Date;
    } else {
      return false;
    }
  },
  error: function(key) {
    return wrongType(key, "date");
  }
};

exports.error = {
  test: function(value) {
    return toString.call(value) === "[object Error]";
  },
  error: function(key) {
    return wrongType(key, "error");
  }
};

exports.regexp = {
  test: function(value) {
    if (value) {
      return value.constructor === RegExp;
    } else {
      return false;
    }
  },
  error: function(key) {
    return wrongType(key, "regexp");
  }
};

exports.promise = {
  test: function(value) {
    if (value) {
      return typeof value.then === "function";
    } else {
      return false;
    }
  },
  error: function(key) {
    return wrongType(key, "promise");
  }
};

exports.any = {
  test: function(value) {
    return value !== void 0;
  },
  error: function(key) {
    return TypeError("`" + key + "` must be defined");
  }
};
