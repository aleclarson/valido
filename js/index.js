// Generated by CoffeeScript 1.12.4
var isObject, registry, toString, valido, wrongType;

isObject = require("isObject");

wrongType = require("./utils/wrongType");

registry = require("./registry");

valido = require("./valido");

valido.get = require("./utils/resolveType");

valido.set = function(tag, config) {
  var validator;
  if (typeof tag !== "string") {
    throw TypeError("`tag` must be a string");
  }
  if (typeof config === "function") {
    validator = valido({
      assert: config
    });
  } else if (isObject(config)) {
    validator = valido(config);
  } else {
    throw TypeError("Expected an object or function");
  }
  validator.name = tag;
  return registry.set(tag, validator);
};

module.exports = valido;

require("./addons/Constructor");

require("./addons/Either");

require("./addons/Maybe");

require("./addons/Shape");

toString = Object.prototype.toString;

["boolean", "function", "number", "string", "symbol"].forEach(function(type) {
  return valido.set(type, {
    test: function(value) {
      return typeof value === type;
    },
    error: function(key) {
      return wrongType(key, type);
    }
  });
});

valido.set("object", {
  test: isObject,
  error: function(key) {
    return wrongType(key, "object");
  }
});

valido.set("array", {
  test: Array.isArray,
  error: function(key) {
    return wrongType(key, "array");
  }
});

valido.set("null", {
  test: function(value) {
    return value === null;
  },
  error: function(key) {
    return TypeError("`" + key + "` must be null");
  }
});

valido.set("date", {
  test: function(value) {
    if (value) {
      return value.constructor === Date;
    } else {
      return false;
    }
  },
  error: function(key) {
    return wrongType(key, "date");
  }
});

valido.set("error", {
  test: function(value) {
    return toString.call(value) === "[object Error]";
  },
  error: function(key) {
    return wrongType(key, "error");
  }
});

valido.set("regexp", {
  test: function(value) {
    if (value) {
      return value.constructor === RegExp;
    } else {
      return false;
    }
  },
  error: function(key) {
    return wrongType(key, "regexp");
  }
});

valido.set("promise", {
  test: function(value) {
    if (value) {
      return typeof value.then === "function";
    } else {
      return false;
    }
  },
  error: function(key) {
    return wrongType(key, "promise");
  }
});

valido.set("any", {
  test: function(value) {
    return value !== void 0;
  },
  error: function(key) {
    return TypeError("`" + key + "` must be defined");
  }
});

if (typeof process !== "undefined") {
  valido.set("buffer", {
    test: Buffer.isBuffer,
    error: function(key) {
      return wrongType(key, "buffer");
    }
  });
}
