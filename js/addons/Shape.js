// Generated by CoffeeScript 1.12.4
var access, addons, assertShape, isObject, resolveError, resolveType, validateShape, validator, valido;

isObject = require("isObject");

resolveError = require("../utils/resolveError");

resolveType = require("../utils/resolveType");

valido = require("../valido");

addons = valido._addons;

validateShape = function(values) {
  var key, ref, result, type;
  if (!isObject(values)) {
    return false;
  }
  ref = this.types;
  for (key in ref) {
    type = ref[key];
    result = type.validate(values[key]);
    if (result !== true) {
      if (result === false) {
        return key;
      }
      return key + "." + result;
    }
  }
  return true;
};

assertShape = function(values) {
  var result;
  result = validateShape(values, this.types);
  if (result !== true) {
    if (result === false) {
      return registry.get("object").error;
    } else {
      return this.error.bind(this, result);
    }
  }
};

validator = {
  validate: validateShape,
  assert: assertShape
};

validator.init = function(shape) {
  var key, types, value;
  this.shape = shape;
  this.types = types = {};
  for (key in shape) {
    value = shape[key];
    types[key] = resolveType(value);
  }
};

validator.error = function(key, parent) {
  var type;
  type = key.split(".").reduce(access, this.shape);
  if (parent) {
    key = parent + "." + key;
  }
  return resolveError(key, type);
};

access = function(obj, key) {
  return obj[key];
};

valido.add(validator, isObject);

addons.Shape = function(shape) {
  var inst;
  inst = Object.create(validator);
  inst.init(shape);
  return inst;
};
