// Generated by CoffeeScript 1.12.4
var getName, registry, wrongType;

wrongType = require("../wrongType");

registry = require("../registry");

module.exports = function(types) {
  var error, names, nullable, optional, validator;
  validator = {};
  if (optional = types[types.length - 1] === "?") {
    types.pop();
  }
  if (nullable = types[types.length - 1] === "null") {
    types.pop();
  }
  names = null;
  error = function(key) {
    if (!names) {
      names = types.reduce(getName, []);
      if (nullable) {
        names.push("null");
      }
    }
    return wrongType(key, names);
  };
  validator.test = function(value) {
    var i, len, type;
    if (value === void 0) {
      return optional;
    }
    if (value === null) {
      return nullable;
    }
    for (i = 0, len = types.length; i < len; i++) {
      type = types[i];
      if (typeof type === "string") {
        if (registry.get(type).test(value)) {
          return true;
        }
      } else if (typeof type === "function") {
        if (value.constructor === type) {
          return true;
        }
      } else if (typeof type.test === "function") {
        if (type.test(value)) {
          return true;
        }
      } else {
        throw Error("Malformed validator");
      }
    }
    return false;
  };
  validator.assert = function(value) {
    if (!this.test(value)) {
      return error;
    }
  };
  return validator;
};

getName = function(names, type) {
  if (typeof type === "string") {
    names.push(type);
  } else if (type.name) {
    names.push(type.name);
  }
  return names;
};
